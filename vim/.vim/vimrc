" toogle's configuration for Vim

"
" General settings
"
set nocompatible
set hidden       " allow edit buffers to be hidden
set number       " show line numbers
set nowrap       " no line wrapping
set showmatch    " show matching brackets
set showcmd      " show (partial) command in status line
set confirm      " ask for confirmation before saving or exiting

set wildignore=*.o,*.obj,*.pyc,*.bak
set fileencodings=utf-8,cp1251,cp866,koi8-r,default
set spelllang=en_us,ru_yo

" Search
set incsearch   " incremental search
set ignorecase  " ignore case of letters while searching
set smartcase   " do smart case matching
set hlsearch    " highlight matches

" Remove a comment leader when joining lines
set formatoptions+=j

" Display unprintable characters
set listchars=tab:▸\ ,trail:·,nbsp:~,precedes:«,extends:»
set list

" Status line
set statusline=%F%m%r%h%w%=%(%c%V\ %l/%L\ %P%)
set laststatus=2

" Update more frequently for asyncronous plugins
set updatetime=100


"
" Plugins
"
call plug#begin('~/.vim/plugged')

Plug 'mhinz/vim-startify'
Plug 'wincent/terminus'
Plug 'easymotion/vim-easymotion'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'Yggdroot/indentLine', { 'on': 'IndentLinesToggle' }
Plug 'msanders/snipmate.vim'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'
Plug 'dense-analysis/ale'
Plug 'editorconfig/editorconfig-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'bling/vim-bufferline'
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'plasticboy/vim-markdown'
Plug 'chrisbra/csv.vim'
Plug 'madox2/vim-ai'
Plug 'nanotech/jellybeans.vim'

call plug#end()


"
" Keyboard mappings
"
set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0

set backspace=indent,eol,start

nnoremap  ;  :

" Allow saving of files as sudo when I forgot to start vim using sudo
cmap  w!!  w !sudo tee > /dev/null %

" Jump to the next row even with line wrapping enabled
nnoremap  j  gj
vnoremap  j  gj
nnoremap  k  gk
vnoremap  k  gk

" Select pasted text
nnoremap  <expr>  vp  '`[' . strpart(getregtype(), 0, 1) . '`]'

" Keep selected text when fixing indentation
vnoremap  <  <gv
vnoremap  >  >gv

" Toggle folds with Space
nnoremap  <silent>  <Space>  :exec 'silent! normal! za' . (foldlevel('.') ? '' : 'l')<CR>

" Disable search highlighting on double Esc
nnoremap  <silent>  <Esc><Esc>  :nohlsearch<CR>

" Easy window navigation
map  <C-h>  <C-w>h
map  <C-j>  <C-w>j
map  <C-k>  <C-w>k
map  <C-l>  <C-w>l

" Toggle line numbers mode
nnoremap  <F4>  :exec &nu==&rnu ? "set nu!" : "set rnu!"<CR>

" Mappings for plugins
nnoremap  <F5>  :NERDTreeToggle<CR>
nnoremap  <F6>  :TagbarToggle<CR>
nnoremap  <F7>  :IndentLinesToggle<CR>
nnoremap  <F8>  :SignifyToggle<CR>

colorscheme jellybeans


"
" GUI settings
"
if has('gui_running')
  set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h12
  set background=dark

  " Do not display vertical scrollbars
  set guioptions-=L
  set guioptions-=r

  " Use Ctrl-s for saving, also in Insert mode
  noremap   <C-s>  :update<CR>
  vnoremap  <C-s>  <C-c>:update<CR>
  inoremap  <C-s>  <C-o>:update<CR>

  " Use Ctrl-q for quit, also in Insert mode
  noremap   <C-q>  :qall<CR>
  vnoremap  <C-q>  <C-c>:qall<CR>
  inoremap  <C-q>  <C-o>:qall<CR>

  " Common clipboard operations
  vnoremap  <S-Del>     "+x   " Shift-Del is Cut
  vnoremap  <C-Insert>  "+y   " Ctrl-Insert is Copy
  map       <S-Insert>  "+gP  " Shift-Insert is Paste
  cmap      <S-Insert>  <C-r>+
  exec "inoremap  <script>  <S-Insert>" paste#paste_cmd['i']
  exec "vnoremap  <script>  <S-Insert>" paste#paste_cmd['v']

  " Easy tab navigation
  map  <C-Tab>    gt
  map  <C-S-Tab>  gT
endif


" Startify
let g:startify_bookmarks = ['~/.vim/vimrc',]
let g:startify_change_to_vcs_root = 1

" EasyMotion
let g:EasyMotion_verbose = 0

map <Leader> <Plug>(easymotion-prefix)

" Tagbar
let g:tagbar_sort = 0
let g:tagbar_compact = 1

" yankstack.vim
nmap <C-p> <Plug>yankstack_substitute_older_paste
nmap <C-n> <Plug>yankstack_substitute_newer_paste

" ALE
let g:ale_completion_enabled = 1

" vim-airline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'jellybeans'

" vim-bufferline
let g:bufferline_echo = 0

" vim-ai
let initial_prompt =<< trim END
>>> system

You are going to play a role of a completion engine with following parameters:
Task: Provide compact code/text completion, generation, transformation or explanation
Topic: General programming and text editing
Style: Plain and concise result without code highlighting and any commentary, unless commentary is necessary
Audience: Users of text editor and programmers that need to transform/generate text
END

let chat_engine_config = {
\  "engine": "chat",
\  "options": {
\    "model": "gpt-4o",
\    "endpoint_url": "https://api.openai.com/v1/chat/completions",
\    "max_tokens": 1000,
\    "temperature": 0.1,
\    "request_timeout": 20,
\    "selection_boundary": "",
\    "initial_prompt": initial_prompt,
\  },
\}

" :AI
let g:vim_ai_complete = chat_engine_config

" :AIEdit
let g:vim_ai_edit = chat_engine_config

" :AIChat
let g:vim_ai_chat = {
\  "options": {
\    "model": "gpt-4o",
\  },
\}
